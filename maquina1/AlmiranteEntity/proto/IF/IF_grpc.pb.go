// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package almirante

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InformanteFulcrumServiceClient is the client API for InformanteFulcrumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InformanteFulcrumServiceClient interface {
	RequestWrite(ctx context.Context, in *WriteReq, opts ...grpc.CallOption) (*WriteResp, error)
}

type informanteFulcrumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInformanteFulcrumServiceClient(cc grpc.ClientConnInterface) InformanteFulcrumServiceClient {
	return &informanteFulcrumServiceClient{cc}
}

func (c *informanteFulcrumServiceClient) RequestWrite(ctx context.Context, in *WriteReq, opts ...grpc.CallOption) (*WriteResp, error) {
	out := new(WriteResp)
	err := c.cc.Invoke(ctx, "/IF.InformanteFulcrumService/RequestWrite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InformanteFulcrumServiceServer is the server API for InformanteFulcrumService service.
// All implementations must embed UnimplementedInformanteFulcrumServiceServer
// for forward compatibility
type InformanteFulcrumServiceServer interface {
	RequestWrite(context.Context, *WriteReq) (*WriteResp, error)
	mustEmbedUnimplementedInformanteFulcrumServiceServer()
}

// UnimplementedInformanteFulcrumServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInformanteFulcrumServiceServer struct {
}

func (UnimplementedInformanteFulcrumServiceServer) RequestWrite(context.Context, *WriteReq) (*WriteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestWrite not implemented")
}
func (UnimplementedInformanteFulcrumServiceServer) mustEmbedUnimplementedInformanteFulcrumServiceServer() {
}

// UnsafeInformanteFulcrumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InformanteFulcrumServiceServer will
// result in compilation errors.
type UnsafeInformanteFulcrumServiceServer interface {
	mustEmbedUnimplementedInformanteFulcrumServiceServer()
}

func RegisterInformanteFulcrumServiceServer(s grpc.ServiceRegistrar, srv InformanteFulcrumServiceServer) {
	s.RegisterService(&InformanteFulcrumService_ServiceDesc, srv)
}

func _InformanteFulcrumService_RequestWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformanteFulcrumServiceServer).RequestWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IF.InformanteFulcrumService/RequestWrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformanteFulcrumServiceServer).RequestWrite(ctx, req.(*WriteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// InformanteFulcrumService_ServiceDesc is the grpc.ServiceDesc for InformanteFulcrumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InformanteFulcrumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "IF.InformanteFulcrumService",
	HandlerType: (*InformanteFulcrumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestWrite",
			Handler:    _InformanteFulcrumService_RequestWrite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "IF.proto",
}
