// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package almirante

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InformanteBrokerServiceClient is the client API for InformanteBrokerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InformanteBrokerServiceClient interface {
	RequestServer(ctx context.Context, in *ServerReq, opts ...grpc.CallOption) (*ServerResp, error)
}

type informanteBrokerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInformanteBrokerServiceClient(cc grpc.ClientConnInterface) InformanteBrokerServiceClient {
	return &informanteBrokerServiceClient{cc}
}

func (c *informanteBrokerServiceClient) RequestServer(ctx context.Context, in *ServerReq, opts ...grpc.CallOption) (*ServerResp, error) {
	out := new(ServerResp)
	err := c.cc.Invoke(ctx, "/IB.InformanteBrokerService/RequestServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InformanteBrokerServiceServer is the server API for InformanteBrokerService service.
// All implementations must embed UnimplementedInformanteBrokerServiceServer
// for forward compatibility
type InformanteBrokerServiceServer interface {
	RequestServer(context.Context, *ServerReq) (*ServerResp, error)
	mustEmbedUnimplementedInformanteBrokerServiceServer()
}

// UnimplementedInformanteBrokerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInformanteBrokerServiceServer struct {
}

func (UnimplementedInformanteBrokerServiceServer) RequestServer(context.Context, *ServerReq) (*ServerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestServer not implemented")
}
func (UnimplementedInformanteBrokerServiceServer) mustEmbedUnimplementedInformanteBrokerServiceServer() {
}

// UnsafeInformanteBrokerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InformanteBrokerServiceServer will
// result in compilation errors.
type UnsafeInformanteBrokerServiceServer interface {
	mustEmbedUnimplementedInformanteBrokerServiceServer()
}

func RegisterInformanteBrokerServiceServer(s grpc.ServiceRegistrar, srv InformanteBrokerServiceServer) {
	s.RegisterService(&InformanteBrokerService_ServiceDesc, srv)
}

func _InformanteBrokerService_RequestServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformanteBrokerServiceServer).RequestServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IB.InformanteBrokerService/RequestServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformanteBrokerServiceServer).RequestServer(ctx, req.(*ServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

// InformanteBrokerService_ServiceDesc is the grpc.ServiceDesc for InformanteBrokerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InformanteBrokerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "IB.InformanteBrokerService",
	HandlerType: (*InformanteBrokerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestServer",
			Handler:    _InformanteBrokerService_RequestServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "IB.proto",
}
