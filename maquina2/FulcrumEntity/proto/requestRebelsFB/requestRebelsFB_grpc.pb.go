// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fulcrum

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RequestRebelsServiceClient is the client API for RequestRebelsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RequestRebelsServiceClient interface {
	RequestRebelsFB(ctx context.Context, in *RebeldesReq, opts ...grpc.CallOption) (*RebeldesResp, error)
}

type requestRebelsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRequestRebelsServiceClient(cc grpc.ClientConnInterface) RequestRebelsServiceClient {
	return &requestRebelsServiceClient{cc}
}

func (c *requestRebelsServiceClient) RequestRebelsFB(ctx context.Context, in *RebeldesReq, opts ...grpc.CallOption) (*RebeldesResp, error) {
	out := new(RebeldesResp)
	err := c.cc.Invoke(ctx, "/requestRebelsFB.RequestRebelsService/RequestRebelsFB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RequestRebelsServiceServer is the server API for RequestRebelsService service.
// All implementations must embed UnimplementedRequestRebelsServiceServer
// for forward compatibility
type RequestRebelsServiceServer interface {
	RequestRebelsFB(context.Context, *RebeldesReq) (*RebeldesResp, error)
	mustEmbedUnimplementedRequestRebelsServiceServer()
}

// UnimplementedRequestRebelsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRequestRebelsServiceServer struct {
}

func (UnimplementedRequestRebelsServiceServer) RequestRebelsFB(context.Context, *RebeldesReq) (*RebeldesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestRebelsFB not implemented")
}
func (UnimplementedRequestRebelsServiceServer) mustEmbedUnimplementedRequestRebelsServiceServer() {}

// UnsafeRequestRebelsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RequestRebelsServiceServer will
// result in compilation errors.
type UnsafeRequestRebelsServiceServer interface {
	mustEmbedUnimplementedRequestRebelsServiceServer()
}

func RegisterRequestRebelsServiceServer(s grpc.ServiceRegistrar, srv RequestRebelsServiceServer) {
	s.RegisterService(&RequestRebelsService_ServiceDesc, srv)
}

func _RequestRebelsService_RequestRebelsFB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebeldesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestRebelsServiceServer).RequestRebelsFB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/requestRebelsFB.RequestRebelsService/RequestRebelsFB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestRebelsServiceServer).RequestRebelsFB(ctx, req.(*RebeldesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RequestRebelsService_ServiceDesc is the grpc.ServiceDesc for RequestRebelsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RequestRebelsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "requestRebelsFB.RequestRebelsService",
	HandlerType: (*RequestRebelsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestRebelsFB",
			Handler:    _RequestRebelsService_RequestRebelsFB_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "requestRebelsFB.proto",
}
